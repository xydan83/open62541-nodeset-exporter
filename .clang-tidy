Checks: >-
  -*,
  boost-*,
  bugprone-*,
  -bugprone-forward-declaration-namespace,
  -bugprone-narrowing-conversions,
  cppcoreguidelines-*,
  -cppcoreguidelines-avoid-magic-numbers,
  clang-analyzer-*,
  google-*,
  -google-readability-todo,
  -google-runtime-references,
  llvm-*,
  misc-*,
  -misc-non-private-member-variables-in-classes,
  modernize-*,
  -modernize-avoid-c-arrays,
  -modernize-use-trailing-return-type,
  performance-*,
  portability-*,
  readability-*,
  -readability-convert-member-functions-to-static,
  -readability-function-cognitive-complexity,
  -readability-redundant-access-specifiers,
  -bugprone-easily-swappable-parameters
CheckOptions:
  - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic, value: 1 }

  #=== Naming rules. ===#
  # General.
  - { key: readability-identifier-naming.VariableCase,          value: lower_case }
  - { key: readability-identifier-naming.FunctionCase,          value: CamelCase  }
  - { key: readability-identifier-naming.ParameterCase,         value: lower_case }
#  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase  }
  - { key: readability-identifier-naming.TypeAliasCase,         value: CamelCase  }
  # Macros.
  # Disabled because clang-tidy also parses defines passed through the -D compiler.
  # As a result, external library options do not pass checks and result in errors (for example, '-DMQTT_STD_ANY').
  #- { key: readability-identifier-naming.MacroDefinitionCase,   value: UPPER_CASE }
  #- { key: readability-identifier-naming.MacroDefinitionPrefix, value: IDSMART_   }
  # Classes and structure.
  - { key: readability-identifier-naming.ClassCase,             value: CamelCase  }
  - { key: readability-identifier-naming.MemberCase,            value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberPrefix,   value: m_         }
  - { key: readability-identifier-naming.ProtectedMemberPrefix, value: m_         }
  # Structure.
  - { key: readability-identifier-naming.StructCase,            value: CamelCase  }
  # Enums.
  - { key: readability-identifier-naming.EnumCase,              value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantCase,      value: CamelCase  }
  # Unions.
  - { key: readability-identifier-naming.UnionCase,             value: CamelCase  }
WarningsAsErrors: '*'
HeaderFilterRegex: '(src/idsmart|include/idsmart)/.*\.(h|hpp|hxx|c|cpp|cxx)$'
FormatStyle: file
